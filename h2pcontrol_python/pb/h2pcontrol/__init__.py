# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: h2pcontrol.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Empty",
    "FetchServerDefinition",
    "FetchServersResponse",
    "FetchSpecificServerRequest",
    "FetchSpecificServerResponse",
    "File",
    "HeartbeatPong",
    "RegisterRequest",
    "RegisterResponse",
    "ServerDefinition",
    "StubRequest",
    "StubResponse",
    "ManagerStub",
    "ManagerBase",
)

from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ..message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server

betterproto2.check_compiler_version("0.4.0")


@dataclass(eq=False, repr=False)
class Empty(betterproto2.Message):
    pass


default_message_pool.register_message("h2pcontrol", "Empty", Empty)


@dataclass(eq=False, repr=False)
class FetchServerDefinition(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    description: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    addr: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "h2pcontrol", "FetchServerDefinition", FetchServerDefinition
)


@dataclass(eq=False, repr=False)
class FetchServersResponse(betterproto2.Message):
    servers: "list[FetchServerDefinition]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "h2pcontrol", "FetchServersResponse", FetchServersResponse
)


@dataclass(eq=False, repr=False)
class FetchSpecificServerRequest(betterproto2.Message):
    addr: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "h2pcontrol", "FetchSpecificServerRequest", FetchSpecificServerRequest
)


@dataclass(eq=False, repr=False)
class FetchSpecificServerResponse(betterproto2.Message):
    server_definition: "FetchServerDefinition | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    proto: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "h2pcontrol", "FetchSpecificServerResponse", FetchSpecificServerResponse
)


@dataclass(eq=False, repr=False)
class File(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    content: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)


default_message_pool.register_message("h2pcontrol", "File", File)


@dataclass(eq=False, repr=False)
class HeartbeatPong(betterproto2.Message):
    healthy: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)


default_message_pool.register_message("h2pcontrol", "HeartbeatPong", HeartbeatPong)


@dataclass(eq=False, repr=False)
class RegisterRequest(betterproto2.Message):
    server: "ServerDefinition | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message("h2pcontrol", "RegisterRequest", RegisterRequest)


@dataclass(eq=False, repr=False)
class RegisterResponse(betterproto2.Message):
    result: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "h2pcontrol", "RegisterResponse", RegisterResponse
)


@dataclass(eq=False, repr=False)
class ServerDefinition(betterproto2.Message):
    server_name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    version: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    proto_files: "list[File]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "h2pcontrol", "ServerDefinition", ServerDefinition
)


@dataclass(eq=False, repr=False)
class StubRequest(betterproto2.Message):
    Server_name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    version: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    language: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    e.g., "python", "java"
    """


default_message_pool.register_message("h2pcontrol", "StubRequest", StubRequest)


@dataclass(eq=False, repr=False)
class StubResponse(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    zip_data: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)

    checksum: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Optional checksum (e.g., SHA256)
    """


default_message_pool.register_message("h2pcontrol", "StubResponse", StubResponse)


class ManagerStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def get_stub(self, message: "StubRequest") -> "StubResponse":
        return self._channel.unary_unary(
            "/h2pcontrol.Manager/GetStub",
            StubRequest.SerializeToString,
            StubResponse.FromString,
        )(message)

    def register_server(self, message: "RegisterRequest") -> "RegisterResponse":
        return self._channel.unary_unary(
            "/h2pcontrol.Manager/RegisterServer",
            RegisterRequest.SerializeToString,
            RegisterResponse.FromString,
        )(message)

    def heartbeat(self, message: "Empty | None" = None) -> "HeartbeatPong":
        if message is None:
            message = Empty()

        return self._channel.unary_unary(
            "/h2pcontrol.Manager/Heartbeat",
            Empty.SerializeToString,
            HeartbeatPong.FromString,
        )(message)

    def fetch_servers(self, message: "Empty | None" = None) -> "FetchServersResponse":
        if message is None:
            message = Empty()

        return self._channel.unary_unary(
            "/h2pcontrol.Manager/FetchServers",
            Empty.SerializeToString,
            FetchServersResponse.FromString,
        )(message)

    def fetch_specific_server(
        self, message: "FetchSpecificServerRequest"
    ) -> "FetchSpecificServerResponse":
        return self._channel.unary_unary(
            "/h2pcontrol.Manager/FetchSpecificServer",
            FetchSpecificServerRequest.SerializeToString,
            FetchSpecificServerResponse.FromString,
        )(message)


class ManagerBase(ServiceBase):
    async def get_stub(self, message: "StubRequest") -> "StubResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def register_server(self, message: "RegisterRequest") -> "RegisterResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def heartbeat(self, message: "Empty") -> "HeartbeatPong":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_servers(self, message: "Empty") -> "FetchServersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_specific_server(
        self, message: "FetchSpecificServerRequest"
    ) -> "FetchSpecificServerResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_stub(
        self, stream: "grpclib.server.Stream[StubRequest, StubResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_stub(request)
        await stream.send_message(response)

    async def __rpc_register_server(
        self, stream: "grpclib.server.Stream[RegisterRequest, RegisterResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.register_server(request)
        await stream.send_message(response)

    async def __rpc_heartbeat(
        self, stream: "grpclib.server.Stream[Empty, HeartbeatPong]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.heartbeat(request)
        await stream.send_message(response)

    async def __rpc_fetch_servers(
        self, stream: "grpclib.server.Stream[Empty, FetchServersResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_servers(request)
        await stream.send_message(response)

    async def __rpc_fetch_specific_server(
        self,
        stream: "grpclib.server.Stream[FetchSpecificServerRequest, FetchSpecificServerResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_specific_server(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/h2pcontrol.Manager/GetStub": grpclib.const.Handler(
                self.__rpc_get_stub,
                grpclib.const.Cardinality.UNARY_UNARY,
                StubRequest,
                StubResponse,
            ),
            "/h2pcontrol.Manager/RegisterServer": grpclib.const.Handler(
                self.__rpc_register_server,
                grpclib.const.Cardinality.UNARY_UNARY,
                RegisterRequest,
                RegisterResponse,
            ),
            "/h2pcontrol.Manager/Heartbeat": grpclib.const.Handler(
                self.__rpc_heartbeat,
                grpclib.const.Cardinality.UNARY_UNARY,
                Empty,
                HeartbeatPong,
            ),
            "/h2pcontrol.Manager/FetchServers": grpclib.const.Handler(
                self.__rpc_fetch_servers,
                grpclib.const.Cardinality.UNARY_UNARY,
                Empty,
                FetchServersResponse,
            ),
            "/h2pcontrol.Manager/FetchSpecificServer": grpclib.const.Handler(
                self.__rpc_fetch_specific_server,
                grpclib.const.Cardinality.UNARY_UNARY,
                FetchSpecificServerRequest,
                FetchSpecificServerResponse,
            ),
        }
