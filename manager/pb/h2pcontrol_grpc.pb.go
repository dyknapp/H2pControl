// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: h2pcontrol.proto

package h2pcontrol_manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Manager_GetStub_FullMethodName             = "/h2pcontrol.Manager/GetStub"
	Manager_RegisterServer_FullMethodName      = "/h2pcontrol.Manager/RegisterServer"
	Manager_Heartbeat_FullMethodName           = "/h2pcontrol.Manager/Heartbeat"
	Manager_FetchServers_FullMethodName        = "/h2pcontrol.Manager/FetchServers"
	Manager_FetchSpecificServer_FullMethodName = "/h2pcontrol.Manager/FetchSpecificServer"
)

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	GetStub(ctx context.Context, in *StubRequest, opts ...grpc.CallOption) (*StubResponse, error)
	RegisterServer(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Heartbeat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HeartbeatPong, error)
	FetchServers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FetchServersResponse, error)
	FetchSpecificServer(ctx context.Context, in *FetchSpecificServerRequest, opts ...grpc.CallOption) (*FetchSpecificServerResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) GetStub(ctx context.Context, in *StubRequest, opts ...grpc.CallOption) (*StubResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StubResponse)
	err := c.cc.Invoke(ctx, Manager_GetStub_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) RegisterServer(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, Manager_RegisterServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) Heartbeat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HeartbeatPong, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatPong)
	err := c.cc.Invoke(ctx, Manager_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) FetchServers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FetchServersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchServersResponse)
	err := c.cc.Invoke(ctx, Manager_FetchServers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) FetchSpecificServer(ctx context.Context, in *FetchSpecificServerRequest, opts ...grpc.CallOption) (*FetchSpecificServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchSpecificServerResponse)
	err := c.cc.Invoke(ctx, Manager_FetchSpecificServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility.
type ManagerServer interface {
	GetStub(context.Context, *StubRequest) (*StubResponse, error)
	RegisterServer(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Heartbeat(context.Context, *Empty) (*HeartbeatPong, error)
	FetchServers(context.Context, *Empty) (*FetchServersResponse, error)
	FetchSpecificServer(context.Context, *FetchSpecificServerRequest) (*FetchSpecificServerResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedManagerServer struct{}

func (UnimplementedManagerServer) GetStub(context.Context, *StubRequest) (*StubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStub not implemented")
}
func (UnimplementedManagerServer) RegisterServer(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterServer not implemented")
}
func (UnimplementedManagerServer) Heartbeat(context.Context, *Empty) (*HeartbeatPong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedManagerServer) FetchServers(context.Context, *Empty) (*FetchServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchServers not implemented")
}
func (UnimplementedManagerServer) FetchSpecificServer(context.Context, *FetchSpecificServerRequest) (*FetchSpecificServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchSpecificServer not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}
func (UnimplementedManagerServer) testEmbeddedByValue()                 {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	// If the following call pancis, it indicates UnimplementedManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_GetStub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetStub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetStub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetStub(ctx, req.(*StubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_RegisterServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).RegisterServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_RegisterServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).RegisterServer(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).Heartbeat(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_FetchServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).FetchServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_FetchServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).FetchServers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_FetchSpecificServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchSpecificServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).FetchSpecificServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_FetchSpecificServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).FetchSpecificServer(ctx, req.(*FetchSpecificServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "h2pcontrol.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStub",
			Handler:    _Manager_GetStub_Handler,
		},
		{
			MethodName: "RegisterServer",
			Handler:    _Manager_RegisterServer_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Manager_Heartbeat_Handler,
		},
		{
			MethodName: "FetchServers",
			Handler:    _Manager_FetchServers_Handler,
		},
		{
			MethodName: "FetchSpecificServer",
			Handler:    _Manager_FetchSpecificServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "h2pcontrol.proto",
}
