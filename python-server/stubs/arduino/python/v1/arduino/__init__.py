# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: arduino.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "HelloReply",
    "HelloRequest",
    "GreeterStub",
    "GreeterBase",
)

from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ..message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server

betterproto2.check_compiler_version("0.4.0")


@dataclass(eq=False, repr=False)
class HelloReply(betterproto2.Message):
    """
    The response message containing the greetings
    """

    message: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message("arduino", "HelloReply", HelloReply)


@dataclass(eq=False, repr=False)
class HelloRequest(betterproto2.Message):
    """
    The request message containing the user's name.
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message("arduino", "HelloRequest", HelloRequest)


class GreeterStub:
    """
    The greeting service definition.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def say_hello(self, message: "HelloRequest") -> "HelloReply":
        """
        Sends a greeting
        """

        return self._channel.unary_unary(
            "/arduino.Greeter/SayHello",
            HelloRequest.SerializeToString,
            HelloReply.FromString,
        )(message)

    def say_hello_again(self, message: "HelloRequest") -> "HelloReply":
        return self._channel.unary_unary(
            "/arduino.Greeter/SayHelloAgain",
            HelloRequest.SerializeToString,
            HelloReply.FromString,
        )(message)


class GreeterBase(ServiceBase):
    """
    The greeting service definition.
    """

    async def say_hello(self, message: "HelloRequest") -> "HelloReply":
        """
        Sends a greeting
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def say_hello_again(self, message: "HelloRequest") -> "HelloReply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_say_hello(
        self, stream: "grpclib.server.Stream[HelloRequest, HelloReply]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.say_hello(request)
        await stream.send_message(response)

    async def __rpc_say_hello_again(
        self, stream: "grpclib.server.Stream[HelloRequest, HelloReply]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.say_hello_again(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/arduino.Greeter/SayHello": grpclib.const.Handler(
                self.__rpc_say_hello,
                grpclib.const.Cardinality.UNARY_UNARY,
                HelloRequest,
                HelloReply,
            ),
            "/arduino.Greeter/SayHelloAgain": grpclib.const.Handler(
                self.__rpc_say_hello_again,
                grpclib.const.Cardinality.UNARY_UNARY,
                HelloRequest,
                HelloReply,
            ),
        }
